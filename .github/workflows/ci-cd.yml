name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  clear-and-prune:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Clear app directory, stop containers, and prune system
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          cd ~ || exit
          docker compose down || true
          docker system prune --force || true
          rm -rf app || true

  generate-env-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: SSH into EC2 instance, create app directory, and generate .env file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          mkdir -p ~/app || true
          cd ~/app || exit
          echo "SECRET_KEY=${SECRET_KEY}" >> .env
          echo "ALLOWED_HOSTS=${ALLOWED_HOSTS}" >> .env
          echo "CORS_ORIGIN_ALLOW_ALL=${CORS_ORIGIN_ALLOW_ALL}" >> .env
          echo "CORS_ALLOW_ALL_ORIGINS=${CORS_ALLOW_ALL_ORIGINS}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}" >> .env
          echo "LIVE=${LIVE}" >> .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env 
          echo "POSTGRES_HOST=${POSTGRES_HOST}" >> .env
          echo "DEBUG=${DEBUG}" >> .env
          echo "SHOW_DOCS=${SHOW_DOCS}" >> .env
          echo "GOOGLE_OAUTH2_CLIENT_ID=${GOOGLE_OAUTH2_CLIENT_ID}" >> .env
          echo "GOOGLE_OAUTH2_CLIENT_SECRET=${GOOGLE_OAUTH2_CLIENT_SECRET}" >> .env
          echo "FACEBOOK_OAUTH_CLIENT_ID=${FACEBOOK_OAUTH_CLIENT_ID}" >> .env
          echo "FACEBOOK_OAUTH_CLIENT_SECRET=${FACEBOOK_OAUTH_CLIENT_SECRET}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}" >> .env
          echo "AWS_QUERYSTRING_AUTH=${AWS_QUERYSTRING_AUTH}" >> .env
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
          echo "STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}" >> .env
          echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> .env
          echo "STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}" >> .env
          echo "FRONT_END_SHARE_STORY_URL=${FRONT_END_SHARE_STORY_URL}" >> .env
          echo "FRONTEND_GOOGLE_OAUTH_URL=${FRONTEND_GOOGLE_OAUTH_URL}" >> .env
          echo "FRONTEND_FACEBOOK_OAUTH_URL=${FRONTEND_FACEBOOK_OAUTH_URL}" >> .env
          echo "FRONTEND_DOWNLOAD_ERROR_URL=${FRONTEND_DOWNLOAD_ERROR_URL}" >> .env
          echo "EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> .env
          echo "EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> .env
          echo "BACKEND_DOWNLOAD_URL=${BACKEND_DOWNLOAD_URL}/api/v1/download/?token" >> .env
          echo "GENERATE_CODE=${GENERATE_CODE}" >> .env || true

    - name: Copy files to EC2 instance and deploy
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: .
        target: ~/app || true

    - name: SSH into EC2 instance, build Docker images, and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          cd ~/app || exit
          docker compose build || true
          docker compose up -d || true
